#!/usr/bin/perl -w
#
# $Id: mkdist,v 1.17 2002/02/27 17:50:28 epaepa Exp $
#
# This script is meant to be run in an empty directory, although
# it doesn't require it.
#
# This script checks out the latest head revision (by checking it
# out from scratch), updates version information in README,
# ignores files/dirs we don't want to release, tags the source
# files in cvs, generates a ChangeLog and generates the
# .tar.gz and .tar.bz2 files for release.
#
# It DOES NOT: post the files to sf, or email announcements, or
# update www pages, although it reminds you to do so :)
#
# -- jerry@matilda.com
#

use strict;
#use diagnostics;
use Getopt::Long;

#$SIG{__WARN__} = sub { die $_[0] };

my $debug;

sub Usage()
{
    print "mkdist --version <id> [options]\n";
    print "where options are:\n";
    print "    --version <id>.  - creating version <id> (use 0.4, or 0.4.1)\n";
    print "    --sfuser <login> - sourceforge login with cvs access\n";
    print "                       defaults to first xmltv login in ~/.cvspass\n";
    print "    --help           - this usage message\n";
    print "    --debug          - print debug messages as we go\n";
    print "    --login          - perform cvs login to refresh/verify cvs access\n";
    print "    --step           - step by step confirmation of commands\n";
}

use vars qw/$opt_help $opt_debug $opt_sfuser $opt_login $opt_version $opt_step/;

if ( ! GetOptions('help', 'debug', 'sfuser=s', 'login', 'version=s', 'step') ) {
    Usage();
    exit(1);
}

if ( defined($opt_help) ) {
    Usage();
    exit(0);
}

$debug=1 if ( defined($opt_debug) );

sub do_system($)
{
    my $cmd=$_[0];

    if ($opt_step) {
	print "$cmd [yN]? ";
	my $reply = <STDIN>;
	return if $reply !~ /^[yY]/;
    }

    print "$cmd\n";
    my $rc=system($cmd);
    if ( $rc != 0 ) {
	die "command failed: $rc";
    }
}

if ( !defined($opt_version) ) {
   print STDERR "missing required argument --version, use --help for details\n";
   exit(1);
}
if ( !defined($opt_sfuser) ) {
   if ( open(FD, "< $ENV{HOME}/.cvspass") ) {
	while (<FD>) {
	   if ( m/^:pserver:([^\@]+)\@cvs.xmltv.sourceforge.net:/ ) {
	      $opt_sfuser=$1;
	      print "assuming --sfuser $1 from first xmltv entry in ~/.cvspass\n";
	      last;
	   }
        }
	close(FD);
        if ( !defined($opt_sfuser) ) {
	   print STDERR "failed to locate any appropriate entry in ~/.cvspass\n";
	}
   }
   else {
 	print STDERR "failed to locate any appropriate entry in ~/.cvspass\n";
   }
   if ( !defined($opt_sfuser) ) {
      print STDERR "missing required argument --sfuser, use --help for details\n";
      exit(1);
   }
}

print "****** Did you update the README file release information ? *****\n";
print "hit return to continue with mkdist, or ^C to stop here.";
my $junk=<>; # read return

print "opt_version=\"$opt_version\"\n" if ( $debug );

#if ( !($opt_version=~m/^\d+\.\d+$/o) && !($opt_version=~m/^\d+\.\d+\.\d+$/o) ) {
#    print STDERR "invalid version id, specify something of the form \"[0-9].[0-9]\" or \"[0-9].[0-9].[0-9]\"\n";;
#    exit(1);
#}

my $cvs_tag="V$opt_version";
$cvs_tag=~s/\./_/og;

print "version tag to use is: $cvs_tag\n" if ( $opt_debug );

# always use ssh for cvs access
$ENV{CVS_RSH}="ssh";

if ( defined($opt_login) ) {
    # use pserver to login
    $ENV{CVSROOT}=":pserver:$opt_sfuser\@cvs.xmltv.sourceforge.net:/cvsroot/xmltv";
    do_system("cvs login");
}

print "\nChecking out current head revision in ./xmltv ..\n";

if ( -d "xmltv" ) {
   print STDERR "./xmltv exists, remove and re-run $0\n";
   exit 1;
}

do_system("CVS_RSH=ssh CVSROOT=\":ext:$opt_sfuser\@cvs.xmltv.sourceforge.net:/cvsroot/xmltv\" cvs -q co xmltv");

open(FD, "< xmltv/README") || die "README: $!";
$_=<FD>;
chop();
close(FD);

if ( m/^XMLTV\s+$opt_version$/ ) {
    print "\nversion information in README looks fine ($_)\n";
}
else {
    print "\nupdating README version line\n";
    open(FD, "< xmltv/README") || die "README: $!";
    open(OD, "> .README-tmp");
    print OD "XMLTV $opt_version\n";
    while(<FD>) {
	print OD "$_";
    }
    close(OD);
    close(FD);
    unlink("xmltv/README") || die "unlink xmltv/README:$!";
    rename(".README-tmp", "xmltv/README") || die "rename README-tmp to xmltv/README:$!";

    print "checking in new README with updated version line to \"XMLTV $opt_version\"\n";
    chdir("xmltv");
    do_system("cvs ci -m \'updated version to XMLTV $opt_version\' README");
    chdir("..");
}

chdir("xmltv");
print "\nremoving old tag $cvs_tag just in case\n";
do_system("cvs tag -d \"$cvs_tag\"");
chdir("..");

my @dirs2remove=qw(attic
		   leon
		   cgi
		   todo);

my @files2remove=qw(mkdist
		    ChangeLog.old);

my $cmd="tar cf save.tar ";
for my $dir (@dirs2remove) { $cmd.="./xmltv/$dir "; }
for my $file (@files2remove) { $cmd.="./xmltv/$file "; }

$cmd.="`find xmltv -name CVS -type d`";

print "\ntemperarily removing files/dirs not for release..\n";
do_system($cmd);

for my $dir (@dirs2remove) {
    # take easy route :)
    do_system("rm -rf xmltv/$dir");
}

for my $file (@files2remove) {
    print "rm xmltv/$file";
    unlink("xmltv/$file") || die "unlink xmltv/$file: $!";
}

chdir("xmltv");
print "\ngenerating ChangeLog..\n";
do_system("cvs2cl.pl --utc");

print "\ntagging release with $cvs_tag..\n";
do_system("cvs tag \"$cvs_tag\"");
chdir("..");

print "\nremoving CVS dirs..\n";
do_system("find xmltv -name CVS -type d -prune -exec rm -rf {} \\;");

print "\nrenaming xmltv directory to xmltv-$opt_version..\n";
rename("xmltv", "xmltv-$opt_version");

print "\n";
do_system("tar cf - ./xmltv-$opt_version | gzip --best > xmltv-$opt_version.tar.gz");
do_system("tar cf - ./xmltv-$opt_version | bzip2 --compress --stdout > xmltv-$opt_version.tar.bz2");
print "\n";

print "\nrestoring files that won't be released..\n";
rename("xmltv-$opt_version", "xmltv");
unlink("xmltv/ChangeLog");
do_system("tar xpf save.tar");
unlink("save.tar");

print "\n------------------------------------------------------------------------------------\n";
print "Things left to do:\n";
print " 1. post files on sf\n";
print "    hints:\n";
print "    - ftp release files to upload.sf.net (login as anonymous)\n";
print "    - goto XMLTV project page and click 'admin',\n";
print "      click 'Edit/Release Files',\n";
print "      click 'Add Release' right of 'xmltv' in list\n";
print "      use release name 'XMLTV-$opt_version' and click 'Create This Release'\n";
print "    - in Step 1, change the year in 'Release Date' to 2000, so it reads\n";
print "      2000-01-01 instead of 2002-01-01 and hit 'Submit/Refresh'\n";
print "      (this forces this release to the bottom of the files list so\n";
print "      it doesn't become the current release until your finished)\n";
print "    - scroll down to Step 2 and add the .tar.gz and .tar.bz2 file by\n";
print "      ticking them and click 'Add Files and/or Refresh View' button\n";
print "    - scroll down to Step 3 and choose 'Any' and 'Source bz2' for the\n";
print "      first file and click 'Update/Refresh' button on right-hand-side\n";
print "      (repeate for second release file)\n";
print "    - hit 'Submit/Refresh' in Step 1 section\n";
print "    - goto Files section of XMLTV Project page, and hit 'refresh' in\n";
print "      your bowser until the files show up. (I waited 30 minutes last time)\n";
print "    - when everything looks good, go back into 'Edit/Release Files' and\n";
print "      and update the 'Release Date' to what it was and hit 'Submit/Refresh'\n";
print "    - check Files section and Summary page to make sure your release\n";
print "      appears as the current one.\n";
print "\n";
print " 2. update www page\n";
print "    hints:\n";
print "    - currently this is an 'Ed' only process\n";
print "\n";
print " 3. email release announcement to both xmltv-announce\@lists.sf.net and freshmeat users";
print "    hints:\n";
print "    - try and keep release email short and sweet pointing them back to\n";
print "      the SF page for download and the included ChangeLog for more\n";
print "      release details\n";
print "\n------------------------------------------------------------------------------------\n";

exit 0;

