# Generate tv_grep from tv_grep.in.  This processing is necessary for
# the pod documentation, which should be partly autogenerated from
# XMLTV::list_programme_keys().
#
# We could avoid this step if we had the documentation in a separate
# file - but then we'd need a separate step for producing
# documentation.  The input file tv_grep.in is also a legal Perl
# program, so debugging should not be any harder than it was.
#
# $Id: tv_grep.PL,v 1.2 2002/03/16 19:41:21 epaepa Exp $
#

use IO::File;
use XMLTV;

my $out = shift @ARGV; die "no output file given" if not defined $out;
my $in = 'filter/tv_grep.in';
my $out_fh = new IO::File "> $out" or die "cannot write to $out: $!";
my $in_fh = new IO::File "< $in" or die "cannot read $in: $!";
while (<$in_fh>) {
    if (/^\s*\@PROGRAMME_CONTENT_TESTS\s*$/) {
	# Query XMLTV.pm to find out what keys of programme exist.
	# This is rather a duplicate of the usage message in tv_grep
	# itself: should unify one day.
	#
	my %key_type = %{XMLTV::list_programme_keys()};
 	foreach (sort keys %key_type) {
	    my ($h_name, $mult) = @{$key_type{$_}};
	    die if $mult !~ /^[?1*+]$/;

 	    if ($h_name eq 'presence') {
		# Boolean element, can query with a single flag.  Makes
		# no sense to have more than one of these in a
		# programme.
		#
		die if $mult eq '*' or $mult eq '+';
 		print $out_fh "B<--$_>\n\n";
 	    }
	    elsif ($h_name eq 'scalar' or $h_name eq 'with-lang') {
		# Some text, we can query it (whether one or several).
 		print $out_fh "B<--$_ REGEXP>\n\n";
 	    }
	    else {
 		# Cannot query on this.
 	    }
 	}
    }
    else {
	print $out_fh $_;
    }
}
close $out_fh or die "cannot close $out: $!";
close $in_fh or die "cannot close $in: $!";

