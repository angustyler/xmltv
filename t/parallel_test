#!/usr/bin/perl -w
#
# parallel_test
#
# Quick and dirty test rig I use for checking that changes to
# tv_grab_uk give the same results.  Should be possible to
# use it for testing any program where you want to make sure there are
# no differences between the old and new versions.
#
# At present, the command to run is hardcoded in the script.  You'll
# need to make a copy of this script and edit it.
#
# Should not be installed as part of XMLTV, but can be included in
# source tarball.
#
# -- Ed Avis, epa98@doc.ic.ac.uk, 2002-01-31
# $Id: parallel_test,v 1.12 2002/05/21 14:32:02 epaepa Exp $
#
use strict;
use Log::TraceMessages qw(t d); Log::TraceMessages::check_argv();

# Old command - directory it should run from, and command to run.
my $a_dir = '/homes/epa98/work/apps/xmltv/old_version';
my @a_cmd = qw(perl -Iblib/lib blib/script/tv_grab_uk --share blib/share);
die "no such directory $a_dir - edit the script for your setup\n" if not -d $a_dir;

# New command in its directory.
my $b_dir = '/homes/epa98/work/apps/xmltv/cvs_working';
my @b_cmd = qw(perl -Iblib/lib blib/script/tv_grab_uk --share blib/share);
die "no such directory $b_dir - edit the script for your setup\n" if not -d $b_dir;

# Arguments to pass to each command for each test.  A list of pairs
# and each element of a pair is a list of arguments.
#
my @tests = map { [ $_, $_ ] }
  (
   [qw(--days 1 --config-file grab/uk/test_configs/carlton)],
   [qw(--days 1 --config-file grab/uk/test_configs/bbc1)],
   [qw(--days 1 --config-file grab/uk/test_configs/radio4)],
   [qw(--config-file grab/uk/test_configs/carlton)],
   [qw(--days 1 --config-file grab/uk/test_configs/bbc1)],
   [qw(--config-file grab/uk/test_configs/tynetees)],
   [qw(--days 1 --config-file grab/uk/test_configs/radio)],
   [qw(--config-file grab/uk/test_configs/radio)],
   [qw(--config-file grab/uk/test_configs/satellite)],
   [qw(--config-file grab/uk/test_configs/all)],
   [qw(--config-file grab/uk/test_configs/gratis)],
   [qw(--config-file grab/uk/test_configs/gratis_radio)],
   [qw(--config-file grab/uk/test_configs/music_nickelodeon_e4)],
  );

# Arguments at the start of the command line for every test.
my @constant_args;
@constant_args = qw(--cache /homes/epa98/vol/tmp/tv_grab_uk.cache);

# Directory to store test results.
my $tmp = '/homes/epa98/vol/tmp';

# Normally this script checks for identical output.  But you may give
# fixups to be applied to either version's output before comparison.
#
my (@a_fixups, @b_fixups);
@a_fixups = (q[perl -ne 's!ISO-8859-1!UTF-8!;
                         s!Copyright ..? (\d{4}) Ananova Ltd!Copyright  $1 Ananova Ltd!;
                         s!<tv .+>!<tv source-info-url="http://www.ananova.com/tv_listings/" generator-info-name="Maria Listings Generator" generator-info-url="/tv_listings/_xmltv.php">!;
                         s!>Carlton<!>ITV1 (Carlton)<!;
                         s#<!-- debug_\w+: [^>]* -->##;
                         if (/<title/) { $in_weather = /weather/i }
                         s! - ! -- !g;
                         s/ -while/ --while/g;
                         s/restaurant- /restaurant-- /;
                         s/paralysis- /paralysis-- /;
                         s/A(ll the action from tonight.s big play-off game in the NHL,)/Nick Halling and Russell Chamberlain present a$1/;
                         s!\s*\(T\)!!g;
                         s!\s*\(All ages\)!!g;
                         s/Viva 1-2(\D)/Viva 9-10$1/;
s/Mathematical predictions of the blue whale.s survival chances/The proposed whale sanctuary in the Southern Ocean/;
                         s/riders to perform stunts/riders the chance to perform stunts/;
#                         s/>Ronnie O.Sullivan v Stephen Hendry[.] />/;
#                         s/>Matthew Stevens v Peter Ebdon[.] />/;
                         s/scheme to bring healthcare/method of bringing healthcare/;
                         $in_credits = 1 if /<credits>/;
                         $in_attheraces = 1 if /attheraces/;
                         print unless ($in_credits or /<premiere/ or /A Nightmare on Elm Street.s/
                                       or ($in_attheraces and /<desc/));
                         $in_attheraces = 0 if /programme>/;
                         $in_credits = 0 if m!</credits>!;'],
	     q[recode ISO-8859-1..UTF-8],
#             q[perl -Iblib/lib blib/script/tv_grep -e '$_->{title}->[0]->[0] ne "Public Service Message"'],
	     q[perl -Iblib/lib blib/script/tv_sort],
	     q[perl -Iblib/lib blib/script/tv_extractinfo_en],
	     q[perl -ne 's!>T4:\s+!>!;
                         s/: Part (\S+) --/ -- Part $1:/;
                         s/ raise the cash (to|for) / raise enough cash $1 /;
                         s/ for a concert/ to go to a concert/;
                         s/ an ex-pupil / a former pupil /;
                         s/ a a / a /g;
                         s/ into the Hoobs/ to the Hoobs/;
                         s/blood sports/hunting/;
                         s/stately home/palace/;
                         s/(?<!the )Sheffield Arena/the Sheffield Arena/;
                         s/Coverage of round/Highlights of round/;
                         s/Coverage of the/Highlights of the/;
                         s/Highlights of the Queen/Coverage of the Queen/;
                         s/Chicago star/Musical star/;
                         s/In the opening episode /In the opening episode, /;
                         s/Zoe has a date, /Zoe has a date /;
                         s/Sign Zone:\s+//g;
                         s/With Sir John Mills/With Donal MacIntyre/;
                         s/>Cleaning up one/>One/;
                         s/are there other options available/but what other options are available/;
                         s/face similar difficulty/face a similar problem/;
                         s/aftermath of pit closure/aftermath of a pit closure/;
                         s/>RI:SE</>RI: SE</;
                         s/International League for the Protection of Horses/ILPH/;
                         s/allow riders (.*)to perform/allow the riders $1to perform/;
                         s/riders to perform stunts/riders the chance to perform stunts/;
                         s/steed/horse/;
                         s/has struggled to find work /has struggled to find work, /;
                         s/Word game, with/Word game with/;
                         s/components of jazz[.]/components of jazz music./;
                         s/an extended edition of the words-and-numbers game/the words-and-numbers game/;
                         s/Greater Greensboro Classic/Greater Greensboro Chrysler Classic/;
                         s/Encouraging reading[.]/The `ie" phoneme./;
                         s/The `ie" phoneme[.] \(Age 5-6\)/The `ie" phoneme. (Age 4-6)/;
                         s/Highlights of the Greater Greensboro/The Greater Greensboro/;
                         s/A glass swan/Cultural and historical views of art/;
                         s/new-found/newfound/;
                         s/ with people who are slimming for summer//;
                         s/With people who are slimming for summer/Studio discussion/;
                         s/The surviving victim/The victim/;
                         s/surviving victim of/one of the victims in/;
                         s/Auf Wiedersehen Pet/Auf Wiedersehen, Pet/;
                         s/Boxing drama/Boxing yarn/;
                         s/Kathryn Tickell/Katherine Tickell/;
#                         s/Matthew Stevens v Peter Ebdon and Ronnie O.Sullivan or Stephen Lee v Stephen Hendry. //;
                         s/Racing: Highlights of the/Racing: Coverage of the/;
                         s/World Half Marathon in Brussels/World Half Marathon/;
                         s/semi-final action from the Crucible Theatre/the semi-finals at the Crucible Theatre/;
                         s/Liberty X, Will Young, Dermot O.Leary, Sir Geoff Hurst and Eric Harrison/Liberty X/;
                         s/Liberty X and Will Young/Liberty X/;
                         s/Last in series, starring Fay Ripley/Last in series/;
                         s/The England football team(.)s official supporters. band/England$1s official World Cup brass band/;
                         s/official supporters. band/official World Cup brass band/;
                         s/Richards Whiteley/Richard Whiteley/;
                         s/Television/TV/;
                         s/Enrique Iglesias, Westlife, Holly Valance, Mis-Teeq, and H and Claire/Enrique Iglesias and Westlife/;
                         s/Plus, a Kylie video exclusive//;
                         s/With Enrique Iglesias and Westlife/Westlife perform/;
                         s/Performances by Enrique Iglesias and Westlife[.]/Cat Deeley introduces performances by Enrique Iglesias and Westlife/;
                         s/and Claire makes it her mission/and Clare makes it her mission/;
                         s/Claire discovers Barney/Clare discovers Barney/;
                         s/Janet is pregnant and/Janet is pregnant, and/;
                         s/guinea-pig/guinea pig/g;
                         s/sex education lessons/sex education/;
                         s!Aw/au/augh!Aw/Au/Augh!;
                         s/ecstatic to learn/ecstatic when they learn/;
                         s/a familiar figure makes an unexpected return/a familiar face makes an unexpected return/;
                         s/teenage runaway Abbie/teen runaway Abbie/;
                         s/parents in Australia and a familiar face/parents in Australia as he prepares to leave Crossroads -- just as a familiar face/;
                         s/begins to gather pace/gathers pace/;
                         s/>Omnibus.\s+/>/;
                         s/The development of modern art/How modern art has developed/;
                         s/prison inspectors/prisoner inspectors/;
                         s/making fun of anaesthetised patients/making fun of anaesthetised patients -- just the thing to restore public confidence in the NHS/;
                         s/Changing attitudes to disability/Social change/;
                         s/life, limb and toupee/life and limb/;
                         s/starring Cliff Robertson/also starring Cliff Robertson/;
                         s/The environmental and commercial/Environmental and commercial/;
                         s/Putting months and seasons in order/Ordering the months and seasons of the year/;
                         s/the opening day(.)s play/the fifth and final day$1s play/;
                         s/Frannie Lee, who/Frannie Lee who/;
                         s/help a new friend/aid a new friend/;
                         s/engineered towel -- in/engineered towel in/;
                         s/season, Germany(.)s Jurgen Klinsmann, renowned for his on-pitch theatrics/season and Holland$1s Ronald Koeman who was known as a champion chopper. Also featured are Germany$1s Jurgen Klinsmann, who fell accidentally and beautifully on so many occasions/;
                         s/season, and Germany(.)s Jurgen Klinsmann, renowned for his on-pitch theatrics,/season and Holland$1s Ronald Koeman who was known as a champion chopper/;
                         s/Roberto Rojas, who/Roberto Rojas who/;
                         s/TV critic Jaci Stephen gets healthy/A woman agrees to try and get healthy/;
                         s/>Top!2?:? En Espanol</>Top!</;
                         s/including the legendary diver/featuring the legendary diver/;
                         s/Himalayan mountains/Himalayan Mountains/;
                         s/near the semi-final stage/reach the semi-final stage/;
                         s/A play-off game/A play-off semi-final/;
                         s![.]\s*</desc>!</desc>!;
                         print unless (/<(?:category|subtitles|episode-num)/ or /Gary Lineker and Alistair McGowan/ or /Alex Fearns and Kacey Ainsworth/ or /when he damages the local community/);'],
	     q[perl -Iblib/lib blib/script/tv_sort --by-channel],
             q[perl -pe '
    my %keep_dig = ("BBC1" => 1, "BBC2" => 1, "TCM" => 1);
    $seen_chs = 1 if /<programme/;
    unless ($seen_chs) {
      if (m!^(.+)>(.+)</display-name>!) {
        my $before = $1; my $dn = $2;
        for ($dn) {
	s/Moviemax/Movie Max/;
	s/\+1$/ (Plus 1)/ || s/Plus 1/(Plus 1)/;
	s/Wales \(Digital\)/(Wales Digital)/;
	s/- Widescreen/Widescreen/;
	s/Fox Kids(?! Network)/Fox Kids Network/;
	s/^Yorkshire$/YTV/;
	foreach my $r ("West Country", "Central") {
	    s/^$r$/Carlton-$r/;
	}
	s/^North East$/Tyne Tees/;
	foreach my $r (qw(Ulster Carlton-Central Scottish Carlton
			  Channel Carlton-Westcountry Meridian
			  Grampian Anglia Granada YTV),
		       "Tyne Tees", "Border South", "Border North",
		       "HTV Wales", "HTV West") {
	    if (/^$r$/i) {
		$_ = "ITV1 ($r)";
	    }
	}
	s/East Anglia/East/;
	foreach my $p ("Northern Ireland", "North West", "South West",
		       "East Midlands", "North East", "South East",
		       qw(West Wales Ireland London North East Midlands Scotland South)) {
	    s/$p$/($p)/i && last;
	}
	s/UK Gold 2/UK Gold (2)/;
	s/RTE 1/RTE1/;
	s/(Adults Only \d)/ITV Select ($1)/;
	s/Border$/ITV1 (Border South)/;
	s/Border \(Scottish viewers\)/ITV1 (Border North)/;
	s/\(Ireland\)/(Northern Ireland)/;
	s/Studio/The Studio/;
	foreach my $c ("Disney", "ITV Sport") {
	    s/^$c(?!\s*\w)$/$c Channel/;
	}
	foreach my $c ("Health", "History") {
	    s/^(The )?$c Channel/$c/;
	}
	s/^(\w+) Channel$/The $1 Channel/; s/^The Fantasy/Fantasy/;
	s/^Box$/The Box/;
	s/(Scotland|Ireland) \(Digital\)/($1 Digital)/;
	s/&/and/;
	s/News Channel/News/;
	s/(British Eurosport)/Eurosport ($1)/;
	s/ \(Welsh Channel 4\)//;
	if (/^(.+) \(Digital\)/) {
	    s/ \(Digital\)// unless $keep_dig{$1};
	}
	s/Replay/(Replay)/;
	s/The Playboy Channel/Playboy TV/;
	s/Digtital/Digital/;
	s/Sci-Fi \(\w+\)/Sci-fi/;
	s/ZEE/Zee/;
	s/ITV2/ITV Dig (ITV2)/;
	s/London Live/London 94.9FM/;
	s/Film on Four/FilmFour/;
	s/Easy$/Easy Listening/;
	s/World Service/BBC World Service/;
	s/- ITV Digital/(ITV Digital)/;
	s/Radio 5$/Radio 5 Live/;
	foreach my $v (qw(Extreme World)) {
	    s/FilmFour $v/FilmFour ($v)/;
	}
	s/Asia\.net/Asianet/;
	s/ Television$//;
        }
        $_ = "$before>$dn</display-name>\n";
      }
    }'],
	     q[perl -Iblib/lib blib/script/tv_grep -e '
                 delete $_->{video};
                 if ($_->{"sub-title"}) {
                     $_->{title}->[0]->[0] .= ": " . $_->{"sub-title"}->[0]->[0];
                     delete $_->{"sub-title"};
                 }
                 if (defined $_->{desc}) {
                     foreach (@{$_->{desc}}) {
                         $_->[0] =~ s![.]$!!;
                     }
                 }
                 if ($_->{channel} =~ /bbc2.bbc.co.uk$/ and defined $_->{stop}) {
                     if ($_->{stop} =~ /070000 BST$/) {
                         if ($_->{start} =~ /(\d{6}) BST$/ and $1 < 60000) {
                             $_->{stop} =~ s/070000 BST$/050000 BST/;
                         }
                     }
                 }
                 if (defined $_->{credits} and defined $_->{credits}->{actor}) {
                     @{$_->{credits}->{actor}} = sort @{$_->{credits}->{actor}};
                 }
                 $_->{title}->[0]->[0] =~ s/Kilroy:\s+.+/Kilroy/;
                 $_->{title}->[0]->[0] =~ s/Channel 4 attheraces:\s+.+/Channel 4 attheraces/;
                 $_->{title}->[0]->[0] =~ s/Open University: The Unusual Suspects/The Unusual Suspects/;
                 my $t = $_->{title}->[0]->[0];
                 if ($t =~ /^Helen West/) {
                     delete $_->{desc};
                 }
                 if ($t eq "Channel 5 Football European Under-21 Championship Report") {
                     delete $_->{desc};
                     delete $_->{credits};
                 }
                 $t ne "CBBC" && $t ne "CBeebies" && $t ne "Close" && $t ne "Schools"
                   && $t ne "CITV" && $t ne "Milkshake!" && $t !~ /^Pl.net.com$/
                   && $t ne "Live International Golf: B&H International Open"
                   && $t ne "Ant and Dec in a Tribute to The Likely Lads"
                   && $t !~ /^Big Strong Boys/;
                 ;'],
	     q[tac | perl -pe 'if (/channel="([^"]+)"/) { s/stop="[^"]+" // unless $seen_ch{$1}++ }' | tac]);

####
# Fixups to apply to new output
#
@b_fixups = (q[perl -ne '$in_credits = 1 if /<credits>/;
                         $in_attheraces = 1 if /attheraces/;
                         print unless ($in_credits or /<(?:icon|premiere)/ or /A Nightmare on Elm Street.s/
                                       or ($in_attheraces and /<desc/));
                         $in_attheraces = 0 if /programme>/;
                         $in_credits = 0 if m!</credits>!;'],
	     q[perl -Iblib/lib blib/script/tv_extractinfo_en],
	     q[perl -ne 's/>T4:\s*/>/;
                         s/guinea-pig/guinea pig/g;
                         s!\s*\(All ages\)!!g;
                         s/Sign Zone:\s+//g;
                         s/Zoe has a date, /Zoe has a date /;
s/Mathematical predictions on the blue whale.s survival/The proposed whale sanctuary in the Southern Ocean/;
                         s/blood sports/hunting/;
                         s/allow riders (.*)to perform/allow the riders $1to perform/;
                         s/riders to perform stunts/riders the chance to perform stunts/;
                         s/(?<!the )Sheffield Arena/the Sheffield Arena/;
                         s/The second round of the Greater Greensboro/The Greater Greensboro/;
                         s/an extended edition of the words-and-numbers game/the words-and-numbers game/;
                         s/stately home/palace/;
                         s/new-found/newfound/;
                         s/ -- much to Francesca.s despair --/,/;
                         s/Channel 4 attheraces: From [^<]+/Channel 4 attheraces/;
                         s/Plus, a Kylie video exclusive//;
                         s/The England football team(.)s official supporters. band/England$1s official World Cup brass band/;
                         s/official supporters. band/official World Cup brass band/;
                         s/ with people who are slimming for summer//;
                         s/With people who are slimming for summer/Studio discussion/;
                         s/Auf Wiedersehen Pet/Auf Wiedersehen, Pet/;
                         s/scheme to bring healthcare/method of bringing healthcare/;
                         s/Kathryn Tickell/Katherine Tickell/;
#                         s/Matthew Stevens v Peter Ebdon and Ronnie O.Sullivan or Stephen Lee v Stephen Hendry. //;
                         s/Enrique Iglesias, Westlife, Holly Valance, Mis-Teeq, and H and Claire/Enrique Iglesias and Westlife/;
                         s/Plus, a Kylie video exclusive//;
                         s/With Enrique Iglesias and Westlife/Westlife perform/;
                         s/Performances by Enrique Iglesias and Westlife[.]/Cat Deeley introduces performances by Enrique Iglesias and Westlife/;
                         s/Word game, with/Word game with/;
                         s/Boxing drama/Boxing yarn/;
                         s/semi-final action from the Crucible Theatre/the semi-finals at the Crucible Theatre/;
                         s/Liberty X, Will Young, Dermot O.Leary, Sir Geoff Hurst and Eric Harrison/Liberty X/;
                         s/Liberty X and Will Young/Liberty X/;
                         s/Television/TV/;
                         s/World Half Marathon in Brussels/World Half Marathon/;
                         s/Janet is pregnant and/Janet is pregnant, and/;
                         s/Coverage of the/Highlights of the/;
                         s/>Omnibus[.]\s+/>/;
                         s/>The development of modern art</>How modern art has developed</;
                         s/prison inspectors/prisoner inspectors/;
                         s/making fun of anaesthetised patients</making fun of anaesthetised patients -- just the thing to restore public confidence in the NHS</;
                         s/>:?\s?En Espanol[.]\s+/>/;
                         s/A play-off game/A play-off semi-final/;
                         s/Changing attitudes to disability/Social change/;
                         s![.]</desc>!</desc>!;
                         die if />Omnibus[.]\s/;
                         print unless (/<(?:category|subtitles|episode-num)/ or /Gary Lineker and Alistair McGowan/ or /Alex Fearns and Kacey Ainsworth/ or />[^a-zA-Z]*(?:En Francais|Auf Deutsch|En Espanol)</);'],
	     q[perl -Iblib/lib blib/script/tv_grep -e '
                 delete $_->{video};
                 if ($_->{"sub-title"}) {
                     if ($_->{title}->[0]->[0] ne "Sign Zone" and $_->{title}->[0]->[0] ne "T4") {
                         $_->{title}->[0]->[0] .= ": " . $_->{"sub-title"}->[0]->[0];
                     }
                     else {
                         $_->{title}->[0]->[0] = $_->{"sub-title"}->[0]->[0];
                     }
                     delete $_->{"sub-title"};
                 }
                 if (defined $_->{desc}) {
                     foreach (@{$_->{desc}}) {
                         $_->[0] =~ s![.]$!!;
                     }
                 }
                 if (defined $_->{credits} and defined $_->{credits}->{actor}) {
                     @{$_->{credits}->{actor}} = sort @{$_->{credits}->{actor}};
                 }
                 $_->{title}->[0]->[0] =~ s/Kilroy:\s+.+/Kilroy/;
                 $_->{title}->[0]->[0] =~ s/Channel 4 attheraces:\s+.+/Channel 4 attheraces/;
                 $_->{title}->[0]->[0] =~ s/Open University: The Unusual Suspects/The Unusual Suspects/;
                 my $t = $_->{title}->[0]->[0];

                 if ($t =~ /^Helen West/) {
                     delete $_->{desc};
                 }
                 if ($t eq "Channel 5 Football European Under-21 Championship Report") {
                     delete $_->{desc};
                     delete $_->{credits};
                 }
                 $t !~ /^Pl.net$/ && $t ne "Live International Golf: B&H International Open"
                   && $t ne "Ant and Dec in a Tribute to The Likely Lads"
                   && $t !~ /^Big Strong Boys/;
                 # && $t ne "Tonight with Trevor McDonald"
                 # && $t ne "World Championship Snooker"
                 # && $t ne "Public Service Message"
                 '],
	     q[perl -Iblib/lib blib/script/tv_sort --by-channel],
	     q[tac | perl -pe 'if (/channel="([^"]+)"/) { s/stop="[^"]+" // unless $seen_ch{$1}++ }' | tac]);

# More advanced munging may depend on looking at one file and using it
# to alter the other.  These programs should act as filters, and the
# filename of the 'other' file will be passed as an argument.
#
# Note that @fixup_a_given_b will be run in the directory of the old
# version, and @fixup_b_given_a will run in the new directory.
#
my (@fixup_a_given_b, @fixup_b_given_a);
@fixup_a_given_b = ('perl -Iblib/lib t/add_time_info');

#                          s!<category lang="en">news</category>!<category lang="en">General News/Current Affairs</category>\n    <category lang="en">News/Current Affairs</category>\n    <category lang="en">News/Weather Report</category>! if $in_weather;
#                          s!<category lang="en">news</category>!<category lang="en">General News/Current Affairs</category>\n    <category lang="en">News/Current Affairs</category>! if not $in_weather;
#                          s!<category lang="en">factual</category>!<category lang="en">General Education/Science/Factual Topics</category>\n    <category lang="en">Education/Science/Factual Topics</category>!;
#                          s!<category lang="en">children</category>!<category lang="en">General Childrens/Youth Programmes</category>\n    <category lang="en">Childrens/Youth Programmes</category>!;
#                          s!<category lang="en">talkshow</category>!<category lang="en">Talk Show</category>\n    <category lang="en">Show/Game Show</category>!;
#                          s!<category lang="en">DIY</category>!<category lang="en">DIY</category>\n    <category lang="en">Leisure Hobbies</category>!;
#                          s!<category lang="en">quiz</category>!<category lang="en">Game Show/Quiz/Contest</category>\n    <category lang="en">Show/Game Show</category>!;
#                          s!<category lang="en">soap</category>!<category lang="en">Soap/Melodrama/Folkloric</category>\n    <category lang="en">Movie/Drama</category>!;
#                          s!<category lang="en">drama</category>!<category lang="en">General Movie/Drama</category>\n    <category lang="en">Movie/Drama</category>!;
#                          s!<category lang="en">wildlife</category>!<category lang="en">Nature/Animals/Environment</category>\n    <category lang="en">Education/Science/Factual Topics</category>!;
#                          s!<category lang="en">comedy</category>!<category lang="en">Comedy</category>\n    <category lang="en">Movie/Drama</category>!;
#                          s!<category lang="en">weather</category>!<category lang="en">News/Weather Report</category>\n    <category lang="en">News/Current Affairs</category>!;
#                          s!<category lang="en">music</category>!<category lang="en">Music</category>\n    <category lang="en">Music/Ballet/Dance</category>!;
#                          s!<category lang="en">film</category>!<category lang="en">Movie/Drama</category>\n    <category lang="en">Film</category>!;
#                          s!<category lang="en">sport</category>!<category lang="en">Sports</category>!;
#                          s!<category lang="en">light</category>!<category lang="en">General Show/Game Show</category>\n    <category lang="en">Show/Game Show</category>!;
#                          s!<category lang="en">documentary</category>!<category lang="en">Documentary</category>\n    <category lang="en">News/Current Affairs</category>!;
#                          s!<category lang="en">holiday</category>!<category lang="en">Tourism/Travel</category>\n    <category lang="en">Leisure Hobbies</category>!;
#                          s!<category lang="en">arts</category>!<category lang="en">General Arts/Culture</category>\n    <category lang="en">Arts/Culture</category>!;
#                          s!<category lang="en">business</category>!<category lang="en">General Social/Political Issues/Economics</category>\n    <category lang="en">Social/Political Issues/Economics</category>!;

use Getopt::Std;
use vars qw($opt_q $opt_a $opt_b); getopts('qab');
if ($opt_q) {
    warn "use -a to reuse results from old version, -b for new, -ab for both\n";
    $opt_a = $opt_b = 1;
}

my $starting_test = $ARGV[0] || 0;
my $num_failures = 0;
$SIG{__WARN__} = sub { ++ $num_failures; warn @_ };
for (my $test_num = $starting_test; $test_num < @tests; $test_num++) {
    my ($a_args, $b_args) = @{$tests[$test_num]};
    print STDERR "test $test_num: @$b_args\n";

    chdir $a_dir or die;
    my $old_out = "$tmp/$test_num.old.out";
    unless ($opt_a) {
	system("time @a_cmd @constant_args @$a_args >$old_out") && die "@a_cmd failed";
    }
    foreach (@a_fixups) {
	t "in dir $a_dir, running fixup $_ <$old_out >$old_out.fix";
	system("{ $_ ; } <$old_out >$old_out.fix") && die "$_ failed";
	$old_out = "$old_out.fix";
    }

    chdir $b_dir or die;
    my $new_out = "$tmp/$test_num.new.out";
    unless ($opt_b) {
	system("time @b_cmd @constant_args @$b_args >$new_out") && die "@b_cmd failed";
    }
    foreach (@b_fixups) {
	t "in dir $b_dir, running fixup $_ <$new_out >$new_out.fix";
	system("{ $_ ; } <$new_out >$new_out.fix") && die "$_ failed";
	$new_out = "$new_out.fix";
    }

    if (@fixup_a_given_b and @fixup_b_given_a) {
	warn "fixing up old output given new, _then_ fixing up new given old\n";
    }

    chdir $a_dir or die;
    foreach (@fixup_a_given_b) {
	t "in dir $a_dir, running fixup $_ $new_out <$old_out >$old_out.fix";
	system("{ $_ $new_out ; } <$old_out >$old_out.fix") && die "$_ failed";
	$old_out = "$old_out.fix";
    }
    chdir $b_dir or die;
    foreach (@fixup_b_given_a) {
	t "in dir $b_dir, running fixup $_ $old_out <$new_out >$new_out.fix";
	system("{ $_ $old_out ; } <$new_out >$new_out.fix") && die "$_ failed";
	$new_out = "$new_out.fix";
    }

    my $diff = "$tmp/$test_num.diff";
    if (system("diff -u $old_out $new_out >$diff")) {
	print STDERR "diff found differences: \n";
	open(DIFF, $diff) or die;
	while (<DIFF>) {
	    if ($. > 1000) {
		print "...\n";
		last;
	    }
	    print;
	}
	exit 1;
    }
}
print STDERR "$num_failures errors\n";
exit($num_failures < 255 ? $num_failures : 255);
