#!/usr/bin/perl -w
# 
# Rutger Nijlunsing <xmltv@tux.tmfweb.nl>, <rutger@null.net>
# modified by Ed Avis <epa98@doc.ic.ac.uk>
#
# tv_grab_nl
#
# Get Dutch TV listing for channels Nederland 1, 2 and 3
# from www.omroep.nl, and output them in the format described by
# xmltv.dtd to tv.xml .
#
# Like all programs which parse websites, this is likely to break if
# the NOS changes site layout or Teletekst changes its layout.
#
# 20000926 1.0 Initial version -- Rutger
# 20001007 1.1 Some changes for XMLTV 0.2 -- Ed
# 20001103 1.2 Added getlisting_with_desc -- Rutger

# Rutger: Please mail me if something could be done more logically in
# perl.  I don't speak it fluently yet ;-)
# 
# Ed: or you can mail me for general XMLTV-related stuff.
#

print <<END;
At present tv_grab_nl is not working, because the format of the
website has changed.  Somebody needs to modify it for the new site
layout (which isn\'t _that_ different).
END
__END__

use strict;
use diagnostics;
use POSIX 'tmpnam';

my $VERSION = "1.2 xmltv-0.2";

# Prototype declarations
sub remove_entities($);
sub print_xml_prefix();
sub print_xml_postfix();
sub getlisting();
sub print_program_with_desc();
sub getlisting_with_desc();

# remove_entities()
# 
# Turn HTML entities (like &amp; and &szlig) in a string into Latin-1
# characters.
# 
sub remove_entities($) {
    die 'usage: remove_entities(string)' if @_ != 1;
    local $_ = shift;

    # Entities and the characters they stand for.
    s/\Q\&amp\;\E/ + /g; # FIXME: how to write '&' in XML?
    s/\Q\&auml\;\E/\344/g;
    s/\Q\&uuml\;\E/\374/g;
    s/\Q\&ouml\;\E/\366/g;
    s/\Q\&szlig\;\E/\337/g;
    s/\Q\&egrave\;\E/\350/g;
    s/\Q\&eacute\;\E/\351/g;
    s/\Q\&Auml\;\E/\304/g;
    s/\Q\&deg\;\E/\260/g;

    # Catches both stray ampersands (grr...) and unknown entities
    s/&/ + /g;

    return $_;
}

# Print the prefix needed for the XML file
#
sub print_xml_prefix() {
    print <<END
<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE tv SYSTEM "xmltv.dtd">
<tv source="http://egp.omroep.nl" author="tv_grab_nl-$VERSION">
END
  ;
}

# Print the postfix needed for the XML file
sub print_xml_postfix() {
    print "</tv>\n";
}

sub getlisting() {
    my $base = "http://portal.omroep.nl";
    # Fetch a cookie
    my $get = "curl -s";
    print STDERR "Fetching cookie...\n";
    my $cookie = `$get -i $base -s | grep Set-cookie:`;
    $cookie =~ s/.*: (.*);.*;.*/$1/;
    chomp($cookie);
    if ($cookie eq "") {
	die "Could not retrieve cookie from $base";
    }
    my $header =
	"-A 'Mozilla/3.0 (Win95; I)' " .
	"-s --referer www.omroep.nl " .
	"--cookie \"$cookie\"";
    $get = $get . " " . $header;
    
    my @blocks = (
        "NL1,NL2,NL3",
	"RT4,RT5,VER",
        "SBS,NT5,FOX",
        "VRT,KET",
        "ARD,ZDF",
        "BB1,BB2",
        "TMF,MTB"
    );

    my $tmp = tmpnam();

    my $relativeDay = 0;
    foreach my $block (@blocks) {
        print STDERR "Fetching $block...\n";
	system(
	    $get .
	    " -F \"dag=$relativeDay\"" .
	    " -F \"zender=0\"" .
	    " -F \"blok=$block\"" .
	    " -F \"genre=0\"" .
	    " http://epg.omroep.nl/televisie.php" .
	    " >>$tmp"
        );
    }

    open(FIN, "<$tmp") || die("Could not open $tmp for reading");
    print STDERR "Writing output...\n";
    my $channel;
    my $date = `date --date \"$relativeDay days\" +"%Y%m%d"`; # Not correct when date > 0:00am
    chomp($date);

    print_xml_prefix();

    while (<FIN>) {
	if (/TABLE/ && /\<B\>(.*)\<\/B\>/) {
	    $channel = $1;
	}
	if (/\<TR\>\<TD VALIGN="top" NOWRAP\>(.*)\<\/TD\>\<TD\>\<A HREF="javascript:PI\(\d+\)"\>(.*)\<\/A\>(.*)\<\/TD\>\<\/TR\>/) {
	    my $time = $1;
	    my $program = remove_entities($2);
	    my $station = $3;	# Not used yet
	    $time =~ tr/0-9//cd;	# Remove all non digits
	    print
		"  <programme" .
		    " start=\"$date$time CEST\"" .
		    " channel=\"$channel\">" .
		"    <title>$program</title>" .
		"  </programme>\n";
	} elsif (/javascript:PI/) {
	    print;
	}
    }
    print_xml_postfix();

    close(FIN);

    unlink($tmp);
}

sub print_program_with_desc() {
}

sub getlisting_with_desc() {
    print_xml_prefix();
    my $title;
    my $genre; 
    my $desc;
    my $date;
    my $start;
    my $end;
    my $channel;
    my $station;
    my $country;
    my $presentation;
    my $actors;
    
    open(FIN, "curl http://epg.omroep.nl/proginfo.php?id=[1-500] 2>/dev/null|");
    while(<FIN>) {
	if (/<\/HTML>/) {
	    # End of program; print all info
	    print "  <programme" .
		      " start=\"$start\"" .
		      " stop=\"$end\"" .
		      " channel=\"$channel\"" .
		  ">\n";
	    print "    <title>$title</title>\n";
	    print "    <desc>$desc</desc>\n";
	    if ($presentation || $actors) {
		print "    <credits>\n";
		if ($presentation) {
		    print "      <presenter>$presentation</presenter>\n";
		}
		if ($actors) {
		    print "      <actor>$actors</actor>\n";
		}
		print "    </credits>\n";
	    }
	    if ($genre) {
		print "    <category>$genre</category>\n";
	    }
	    if ($country) { 
		print "    <country>$country</country>\n";
	    }
	    print "  </programme>\n";

	    undef $title;
	    undef $genre;
	    undef $desc;
	    undef $date;
	    undef $start;
	    undef $end;
	    undef $channel;
	    undef $station;
	    undef $actors;
	    undef $presentation;
	} elsif (/<B>Titel<\/B>.*<B>(.*)<\/B>/) {
	    $title = remove_entities($1);
	} elsif (/<TR><TD CLASS="bl"><B>Genre<\/B><\/TD><TD BGCOLOR="#E1E6F5" CLASS="bl">(.*)<\/TD><\/TR>/) {
	    $genre = remove_entities($1);
	} elsif ((defined $title) && (not defined $desc) && /<TR><TD.*<\/TD><\/TR><TR><TD COLSPAN="2" CLASS="bl">(.*)<\/TD><\/TR>/) {
	    $desc = remove_entities($1);
	    $desc =~ s/ +$//;
	    while ($desc =~ s[<a .*?href="(.*?)".*?>(.*?)</a>][$2]i) {
		if ($1 ne $2) {
		    warn "discarding link $2 -> <$1>\n";
		}
		else {
		    warn "discarding link to <$1>\n";
		}
	    }
	} elsif (/javascript:printProgInfo/) {
	    my ($day, $month, $year);
	    if (/<B>(\d+)-(\d+)-(\d+)/) {
		($day, $month, $year) = ($1, $2, $3);
	    } else {
		($day, $month, $year) = ("99", "99", "9999");
	    }
	    if (/(\d+:\d+) - (\d+:\d+)/) {
		($start, $end) = ($1, $2);
	    } else {
		($start, $end) = ("9999", "9999");
	    }
	    if (/, (.*)<\/B>/) {
		$channel = remove_entities($1);
	    }
	    $date = $year . $month . $day;
	    $start =~ s/://g;
	    $start = $date . $start;
	    $end =~ s/://g;
	    $end = $date . $end;
	    if ($channel =~ /(.*) \((.*)\)/) {
		# Seperate channel and station
		$channel = $1;
		$station = $2;
	    }
	} elsif (/<B>Land<\/B><\/TD><TD BGCOLOR="#E1E6F5" CLASS="bl">(.*)<\/TD><\/TR>/) {
	    $country = remove_entities($1);
	} elsif (/<TR><TD CLASS="bl"><B>Presentatie<\/B><\/TD><TD BGCOLOR="#E1E6F5" CLASS="bl">(.*)<\/TD><\/TR>/) {
	    $presentation = remove_entities($1);
	} elsif (/<B>Acteurs<\/B><\/TD><TD BGCOLOR="#E1E6F5" CLASS="bl">(.*)<\/TD><\/TR>/) {
	    $actors = remove_entities($1);
	}
    }
    close(FIN);
    print_xml_postfix();
}

#getlisting();
getlisting_with_desc();
