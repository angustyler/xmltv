#!/usr/bin/perl -w
#
# Run lots of filter programs on lots of inputs and check the output
# is as expected.  We do not check the stderr messages, and we do not
# allow for filters that return an error code.  In fact, they're not
# filters at all: we assume that each can take an input filename and
# the --output option.
#
# -- Ed Avis, epa98@doc.ic.ac.uk, 2002-02-14
#

use strict;

my @cmds = ([ 'tv_cat' ],
	    [ 'tv_extractinfo_en' ],
	    [ 'tv_grep', 'a' ],
	    [ 'tv_grep', '--category', 'b' ],
	    [ 'tv_grep', '-i', '--last-chance', 'c' ],
	    [ 'tv_grep', '--new' ],
	    [ 'tv_grep', '--channel-name', 'd' ],
	    [ 'tv_grep', '--channel-id', 'channel4.com' ],
	    [ 'tv_grep', '--on-after', '2002-02-05' ],
	    [ 'tv_grep', '--eval', 'scalar keys %$_ > 5' ],
	    [ 'tv_grep', '--category', 'e', '--and', '--title', 'f' ],
	    [ 'tv_grep', '--category', 'g', '--or', '--title', 'h' ],
	    [ 'tv_grep', '-i', '--category', 'i', '--title', 'j' ],
	    [ 'tv_sort' ],
	    [ 'tv_to_latex' ]);

my $tests_dir = 'test_data';
chdir $tests_dir or die "cannot chdir to $tests_dir: $!";

# Directory commands live in relative to $tests_dir.
my $cmds_dir = '..';
die "no directory $cmds_dir relative to $tests_dir"
  if not -d $cmds_dir;

# Any other environment needed (relative to $tests_dir)
$ENV{PERL5LIB} .= ":..";

my %seen;
foreach my $cmd (@cmds) {
    foreach my $in (<*.xml>) {
	my $test_name = join('_', @$cmd, $in);
	$test_name =~ tr/A-Za-z0-9/_/sc;
	die "two tests munge to $test_name"
	  if $seen{$test_name}++;
	print STDERR "test $test_name\n";

	my $expected = "$test_name.expected";
	my $out = "$test_name.out";
	my $diff = "$test_name.diff";

	my @cmd = (@$cmd, $in, '--output', $out);
	$cmd[0] = "$cmds_dir/$cmd[0]";
	system(@cmd)
	  && die "system @cmd failed: $?";

	if (-e $expected) {
	    if (system("diff -u $expected $out >$diff")) {
		print STDERR "diff found differences: \n";
		open(DIFF, $diff) or die;
		while (<DIFF>) {
		    if ($. > 1000) {
			print "...\n";
			last;
		    }
		    print;
		}
		exit 1;
	    }
	}
	else {
	    warn "creating $expected\n";
	    rename($out, $expected)
	      or die "cannot rename $out to $expected: $!";
	}
    }
}


