#!/usr/bin/perl
#
# Run each of the grabbers in turn and do some checks on the output.
# This is a tool for xmltv developers to run only occasionally -
# because it does network fetches it can't be part of 'make test'!
# Run it giving the root of the xmltv source tree, after 'make'.
# It needs a test.conf file in each grabber directory.
#
# -- Ed Avis, ed@membled.com, 2005-08-20
#
use warnings;
use strict;
use Getopt::Long;
use File::chdir;
use FindBin qw($Bin);
use lib "$Bin/../blib/lib";
    
use XMLTV::ValidateFile qw/LoadDtd ValidateFile/;
use XMLTV::ValidateGrabber qw/ValidateGrabber ConfigureGrabber/;

sub w;

our $opt_configure;     # try to --configure grabbers if necessary
our $opt_only;          # run just one grabber
our $opt_list_channels; # run with --list-channels
our $opt_help=0;
our $root = "$Bin/..";

my $result = GetOptions('configure' => \$opt_configure,
			'only=s' => \$opt_only,
			'list-channels' => \$opt_list_channels,
			'xmltv-root=s' => \$root,
			'help|h' => \$opt_help,
			);

if ( scalar( @ARGV ) != 0 or not $result or $opt_help )
{
    print << "EOH";
usage: $0 [options]
    
Valid options:
--only <grabber>  Only test the specified grabber.
--configure       Configure all/the selected grabber(s).
--list-channels   Test that the --list-channels option is supported.
--xmltv-root dir  Root directory for the xmltv distribution. Only necessary
                  if text_grabbers is moved outside of the xmltv distribution
                  directory.

--help            Print this text.

EOH

   exit 1;
}

die "--list-channels not implemented" if $opt_list_channels;

my $dtd_in_root = "$root/xmltv.dtd";
if (not -e $dtd_in_root)
{
    print "$dtd_in_root does not exist.\n";
    print "Failed to find the xmltv distribution directory. Please use the\n";
    print "--xmltv-root parameter to specify it.\n";
    exit 1;
}

LoadDtd( $dtd_in_root );

my @grabbers;
{
    local $CWD = "$root/grab";
    if (defined $opt_only) {
	die "no such grabber $opt_only\n" if not -d $opt_only;
	@grabbers = ($opt_only);
    }
    else {
	@grabbers = grep { -d } <[a-z]*>;
    }
}

foreach (@grabbers) {
    /^[a-z_]+$/ or die "bad grabber name $_";
    my $exe = "tv_grab_$_";
    my $cmd = "perl -I $root/blib/lib $root/blib/script/$exe";
    my $conf = "$root/grab/$_/test.conf";
    my $output_prefix = "t_${_}_";

    if ( -f "$root/blib/script/$exe" )
    {
	w "Testing $exe";
    }
    else
    {
	w "No such grabber $exe.";
	next;
    }

    if( not -f $conf )
    {
	if( $opt_configure )
	{
	    w "Configuring $exe";
            die "Not implemented. Should call ConfigureGrabber.";
	}
	else
	{
	    w "$exe not configured. Skipping.";
	    next;
	}
    }

    my $errors = ValidateGrabber( $cmd, $conf, $output_prefix, 
				  "$root/blib/share/", 1 );

    if( $errors )
    {
	w "$errors errors detected for $exe.";
    }
    else
    {
	w "$exe validated ok.";
    }
}

sub w
{
    print "$_[0]\n";
}
