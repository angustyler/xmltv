#!/usr/bin/perl -w

eval 'exec /usr/bin/perl -w -S $0 ${1+"$@"}'
	if 0; # not running under some shell

=pod

=head1 NAME

tv_grab_za - Grab TV listings for South Africa.

=head1 SYNOPSIS

tv_grab_za --help

tv_grab_za [--config-file FILE] --configure [--gui OPTION]

tv_grab_za [--config-file FILE] [--output FILE] [--days N]
	   [--quiet] [--opentime] [--opentime-combined]

=head1 DESCRIPTION

Output TV listings for DSTV channels available in South Africa.
The data comes from www.dstv.com. The grabber relies on
parsing HTML so it might stop working at any time.

First run B<tv_grab_za --configure> to choose, which channels you want
to download. Then running B<tv_grab_za> with no arguments will output
listings in XML format to standard output.

B<--configure> Prompt for which channels,
and write the configuration file.

B<--config-file FILE> Set the name of the configuration file, the
default is B<~/.xmltv/tv_grab_za.conf>.  This is the file written by
B<--configure> and read when grabbing.

B<--gui OPTION> Use this option to enable a graphical interface to be used.
OPTION may be 'Tk', or left blank for the best available choice.
Additional allowed values of OPTION are 'Term' for normal terminal output
(default) and 'TermNoProgressBar' to disable the use of XMLTV::ProgressBar.

B<--output FILE> write to FILE rather than standard output.

B<--days N> grab N days.  Can be 1, 7, 14 or 30.  Default is 14

B<--quiet> suppress the progress messages normally written to standard
error.

B<--opentime> Discard all M-Net programs outside of opentime

B<--opentime-combined> Generate both Opentime and normal M-Net programs

B<--help> print a help message and exit.

=head1 SEE ALSO

L<xmltv(5)>.

=head1 AUTHORS
Chris Picton <cpicton@users.sf.net>
Neil <neil@mailbox.co.za>

Based on tv_grab_fi by Matti Airas.

=head1 BUGS

Does not automatically update itself, when DSTV changes their site

=cut

######################################################################
# initializations

use strict;
use XMLTV::Version '$Id: tv_grab_za,v 1.11 2005/12/26 17:55:38 epaepa Exp $ ';
use Getopt::Long;
use List::Util qw(min);
use Date::Manip;
use HTML::TreeBuilder;
use HTML::Entities; # parse entities
use IO::File;
#use String::CRC32;
use Digest::MD5 qw(md5 md5_hex);
#use Date::Parse;

use XMLTV;
use XMLTV::Memoize;
use XMLTV::ProgressBar;
use XMLTV::Ask;
use XMLTV::Config_file;
use XMLTV::DST;
use XMLTV::Get_nice;
use XMLTV::Mode;
use XMLTV::Date;
# Todo: perhaps we should internationalize messages and docs?
use XMLTV::Usage <<END
$0: get South African television listings in XMLTV format
To configure: $0 --configure [--config-file FILE]
To grab listings: $0 [--config-file FILE] [--output FILE] [--days N]
		[--quiet] [--opentime] [--opentime-combined] [--retries]
END
  ;

use POSIX qw(strftime);

# Attributes of the root element in output.
my $HEAD = { 'source-info-url'	 => 'http://www.dstv.com/',
			 'source-data-url'	 => "http://www.dstv.com/dstv-guide/default.asp",
			 'generator-info-name' => 'XMLTV',
			 'generator-info-url'  => 'http://membled.com/work/apps/xmltv/',
		   };

# Whether zero-length programmes should be included in the output.
my $WRITE_ZERO_LENGTH = 0;

# The timezone in South Africa.
my $TZ="+0200";

# default language
my $LANG="en";

# Global channel data.
our @ch_all;

our %dstvchannelmap;
our %mnetchannelmap;

my %mnetchannelfixups = (
    'Channel O - Sound Television' => 'Channel O',
    'CNN International' => 'CNN',
    'Discovery Channel' => 'Discovery',
    'E!  Entertainment' => 'E! Entertainment',
    'e tv' => 'e-TV',
    'Hallmark Entertainment Network' => 'Hallmark',
    'History Channel PAS7 (Ku-Band)' => 'History Channel',
    'K World' => 'K-World',
    'M-Net Domestic' => 'M-Net',
    'Movie Magic' => 'mnetmovies1',
    'Movie Magic 2' => 'mnetmovies2',
    'National Geographic' => 'Nat Geographic',
    'SuperSport' => 'SuperSport 1',
    'The Series Channel' => 'M-Net Series',
    'Turner Classic Movies' => 'TCM',
    'VH1' => 'VH-1',
    );

#my %dstvfilehashes = (
#    '1494729404' => '0',
#    '3139098187' => '1',
#    '2091571851' => '2',
#    '2860538121' => '3',
#    '3348398793' => '4',
#    '1813599985' => '5',
#    '1153776246' => '6',
#    '1367985183' => '7',
#    '3033721747' => '8',
#    '2699942871' => '9',
#    );
my %dstvfilehashes = (
    '937c943580ac202fc64a80dbd3be3aab' => '0',
    '40154b2e17f12abc83304910e8b2c184' => '1',
    '261d6eeefee8ee6f398e8d4bef8b51df' => '2',
    'f0e730108d788a4fef7966157d223e12' => '3',
    '309cad2597b2273ecda6614169e79a78' => '4',
    '675fd8104b6fa3ae317cbdc7cb301400' => '5',
    '1d8960a26dce4fd9172a06154d66f692' => '6',
    '479765dcd17d683a3fdbcd5740e11c15' => '7',
    '6eeba41c618fdba24c8fd554023385a9' => '8',
    'f888465466ffa7c7c3cc6c5f12414ad3' => '9',
);

our %dstvtimehashes = ();

# Initialize cookie_jar
use LWP::Simple qw($ua);
use LWP::UserAgent;
use HTTP::Request::Common qw(GET);
use HTTP::Cookies;
my $cookies = HTTP::Cookies->new;
#my $ua = LWP::UserAgent->new(keep_alive => 1);
my $ua = LWP::UserAgent->new;
# Cookies
$ua->cookie_jar($cookies);
# Define user agent type
$ua->agent('Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US)');
# Define timouts
$ua->timeout(240);

######################################################################
# Get options.
#XMLTV::Memoize::check_argv('XMLTV::Get_nice::get_nice_aux');
my ($opt_days, $opt_offset, $opt_help, $opt_output,
	$opt_configure, $opt_config_file, $opt_gui,
	$opt_quiet, $opt_list_channels, $opt_opentime, 
    $opt_opentime_combined, $opt_retries, $opt_mnet_fallback,
    $opt_dstv_fallback, $opt_cache);
$opt_days  = 14; # default
$opt_quiet  = 0; # default
GetOptions('days=i'		=> \$opt_days,
	   'offset=i'           => \$opt_offset,
		   'help'		  => \$opt_help,
		   'configure'	 => \$opt_configure,
		   'opentime'	  => \$opt_opentime,
		   'opentime-combined'	  => \$opt_opentime_combined,
		   'config-file=s' => \$opt_config_file,
		   'gui:s'		 => \$opt_gui,
		   'output=s'	  => \$opt_output,
		   'quiet'		 => \$opt_quiet,
		   'retries'		 => \$opt_retries,
		   'mnet-fallback'		 => \$opt_mnet_fallback,
		   'cache'		 => \$opt_cache,
		  )
  or usage(0);

# For this grabber, we can only grab one of a few fixed day ranges and
# they all start from today.  For compatibility with other grabbers,
# try to decipher --days and --offset options and make sure we
# download a range that includes that.  (It's allowed to get a bit
# more data than the user asked for.)
#
my @allowed_days = qw(1 7 14 30);
die "--offset cannot be negative" if defined $opt_offset and $opt_offset < 0;
die "--days must be positive" if defined $opt_days and $opt_days <= 0;
if ($opt_offset) {
    $opt_days += $opt_offset;
    warn "--offset is not really supported; getting at least $opt_days days to cover the range requested\n";
}
my $use_days = min grep { $_ >= $opt_days } @allowed_days;
die "cannot get $opt_days days; choose one of @allowed_days\n"
  if not defined $use_days;
warn "rounding up to $use_days days (must be one of @allowed_days)\n"
  if $use_days != $opt_days;
# OK, now $use_days has the number of days to grab starting from now.

die '--opentime and --opentime-combined are mutually exclusive' 
	if (defined $opt_opentime && $opt_opentime_combined);
usage(1) if $opt_help;

XMLTV::Ask::init($opt_gui);

my $mode = XMLTV::Mode::mode('grab', # default
							 $opt_configure => 'configure'
							);

# File that stores which channels to download.
my $config_file
  = XMLTV::Config_file::filename($opt_config_file, 'tv_grab_za', $opt_quiet);


 
#init_cookies();

if ($mode eq 'configure') {
	mode_configure();
}
my @config_lines; # used only in grab mode
@config_lines = XMLTV::Config_file::read_lines($config_file);

# Whatever we are doing, we need the channels data.
my @channels;
my %channels;

#######################################
# Ignore the mess for now - will be sorted out soon
die if $mode ne 'grab' and $mode ne 'list-channels';

# Options to be used for XMLTV::Writer.
my %w_args;
if (defined $opt_output) {
	my $fh = new IO::File(">$opt_output");
	die "cannot write to $opt_output: $!" if not defined $fh;
	$w_args{OUTPUT} = $fh;
}
$w_args{encoding} = 'ISO-8859-1';
my $writer = new XMLTV::Writer(%w_args);
$writer->start($HEAD);

if ($mode eq 'list-channels') {
	# Write channels mode.
	$writer->write_channel($_) foreach @ch_all;
	$writer->end();
	exit();
}

######################################################################
# We are producing full listings.
die if $mode ne 'grab';

# Read configuration.
my $line_num = 1;
foreach (@config_lines) {
	++ $line_num;
	next if not defined;
	s/#.*//g;
	next if /^\s+$/;
	s/\s+$//g;
    if (/^channel/) {
    	my (undef, $chanid, $name) = split(/\s+/, $_, 3);
	    $channels{$chanid} = {'name' => $name, 'id' => $chanid};
    }
    if (/^option/) {
    	my (undef, $conf_option, $conf_value) = split(/\s+/, $_, 3);
	    if ($conf_option eq 'opentime') {$opt_opentime = 1;}
	    if ($conf_option eq 'opentime-combined') {$opt_opentime_combined = 1;}
	    if ($conf_option eq 'days') {
		if (defined $opt_days or defined $opt_offset) {
		    # Day stuff was given on the command line.  This
		    # should override whatever's in the config file.
		    #
		}
		else {
		    # Set the number of days from the config file.  It
		    # must be one of the numbers allowed by the site.
		    #
		    $use_days = $conf_value;
		    die "bad number of days $use_days in config file\n"
		      if not grep { $_ == $use_days } @allowed_days;
		}
	    }
	    if ($conf_option eq 'retries') {$opt_retries = $conf_value;}
	    if ($conf_option eq 'mnet-fallback') {$opt_mnet_fallback = 1;}
	    if ($conf_option eq 'dstv-fallback') {$opt_dstv_fallback = 1;}

        die 'config file: --opentime and --opentime-combined are mutually exclusive' 
        	if (defined $opt_opentime && $opt_opentime_combined);
        die 'config file: --mnet-fallback and --dstv-fallback are mutually exclusive' 
        	if (defined $opt_mnet_fallback && $opt_dstv_fallback);


    }
}

# Prepare channel maps

get_mnet_channel_mappings() if defined $opt_mnet_fallback || $opt_dstv_fallback;

get_dstv_channel_mappings();
if (keys %dstvchannelmap == 0) {
 die "error: can't open channel map (http://www.dstv.com/DStv_Guide/default.aspx)";
}
######################################################################
# begin main program


# Print out the channels
die "No channels specified, run me with --configure first\n"
  if not keys %channels;

foreach my $chanid (keys %channels) {
	my $n=$channels{$chanid}->{'name'};
	my $ch_xid="$chanid.dstv.com";
	$writer->write_channel({ id => $ch_xid, 'display-name' => [ [ $n ] ] });
	if ($n eq 'M-Net' && $opt_opentime_combined) {
    	$ch_xid="$chanid-o.dstv.com";
        $n.=" Opentime";
    	$writer->write_channel({ id => $ch_xid, 'display-name' => [ [ $n ] ] });
    }
}

my $bar = new XMLTV::ProgressBar('getting listings', (scalar keys %channels))
  if not $opt_quiet;

foreach (keys %channels) {
	process_html($channels{$_});
	update $bar if not $opt_quiet;
}
$bar->finish() if not $opt_quiet;
$writer->end();

######################################################################
# subroutine definitions

# Use Log::TraceMessages if installed.
BEGIN {
	eval { require Log::TraceMessages };
	if ($@) {
		*t = sub {};
		*d = sub { '' };
	}
	else {
		*t = \&Log::TraceMessages::t;
		*d = \&Log::TraceMessages::d;
		Log::TraceMessages::check_argv();
	}
}

sub tidy( $ ) {
	for (my $tmp = shift) {
		if (not defined $tmp) { return };
        tr/\t\205/ /d;
		s/([^\012\015\040-\176\240-\377]+)//g;
		return $_;
	}
}

####
# process_table: fetch a URL and process it
#
# arguments:
#	Date::Manip object giving the day to grab
#	xmltv id of channel
#	katso id of channel
#
# returns: list of programme hashes to write
#
sub process_html {
	my $inhash = shift;
	my $name = $inhash->{'name'};
    my $result;
    if (!$opt_mnet_fallback && !$opt_dstv_fallback) {

        $result = process_dstv_html($inhash);
       	if ($result =~ /^:error:(.*):/) {
           	    say("\nskipping $name ($1)");
        }
    } else {
    # Fallback support
        if ($opt_mnet_fallback) {
            $result = process_dstv_html($inhash);
            t "result: $result";
        	if ($result =~ /^:error:(.*):/) {
                say("\nattempting mnet fallback for $name ($1)...");
                $result = process_mnet_html($inhash);
                t "result: $result";
                if ($result =~ /^:error:(.*):/) {
                    say("failed, skipping ($1)");
                } 
            }
        } else {
            $result = process_mnet_html($inhash);
            t "result: $result";
            if ($result =~ /^:error:(.*):/) {
                say("\nattempting dstv fallback for $name ($1)...");
                $result = process_dstv_html($inhash);
                t "result: $result";
                if ($result =~ /^:error:(.*):/) {
                    say("failed, skipping ($1)");
                } 
            }
        }   
    }
  
}

# The URI to get listings for a given channel.
sub channel_uri( $ ) {
    my $ch = shift;
    my $mapped = $dstvchannelmap{$ch};
    die "cannot look up '$ch' in map" if not defined $mapped;
    my $days_param = $use_days == 1 ? 0 : $use_days;
    return "http://www.dstv.com/DStv_Guide/print.aspx?Channel=$mapped&time=$days_param&submit=true&Channels";
}

sub process_dstv_html {
    my $inhash = shift;
    my $chanid = $inhash->{'id'};
    my $name = $inhash->{'name'};
    my $now = time();
    my $data;
    my $tries = 0;

    # URI just for error reporting.
    my $uri = channel_uri $name;
    local $SIG{__DIE__} = sub { die "$uri:$_[0]\n" };

    if ($opt_cache) {
	# FIXME this is a security hole: symlink attack in /tmp means
	# you could be tricked into overwriting arbitrary file.
	#
        my $cachefile = "/tmp/tv_grab_za-cache-$chanid";
    	if (! -f $cachefile) {
    		$data=tidy(get_dstv($name));
		warn "writing $cachefile\n";
    		open CACHE, ">$cachefile";
    		print CACHE $data;
    		close CACHE;
    	} else {
	        warn "using $cachefile\n";
    		open CACHE, $cachefile;
    		my @data = <CACHE>;
    		close CACHE;
    		$data = join("", @data);
    	}
    } else {
        $data = tidy(get_dstv($name));
    }

	if ($data =~ /:error:(.*):/) {
        return $data;
	}



    # Get time mappings
    get_dstv_time_mappings($data);

	# parse the page to a document object
	my $tree = HTML::TreeBuilder->new();
	$tree->parse($data);
	my ($prev_r, $r, $prev_time);
	
   	my @array_ot;

	# Find the date headers on the page
	my @date_headers = $tree->look_down(_tag => "td", class => 'srch_date_chnl_head');
	foreach my $td (@date_headers) {
	    my $date = $td->as_text();
	    $date =~ s/^[^\w]+//g;
		
	    my $table = $td->look_up(_tag => "table");
	    my @times = $table->look_down(_tag => "td", class => 'srch_rslt1');
	    foreach my $result (@times) {
		$result = $result->parent();
		
		my $temp;
		$temp = $result->look_down(_tag => "td", class => 	'srch_rslt1');
		my $time = $temp->look_down(_tag => 'b');
		die 'no <b> thing (for time) found' if not defined $time;
		$time = $time->as_text;
		$time =~ /^(\d)(\d):(\d)(\d)$/ or die "bad time '$time'";
			
			my $title = $result->look_down(_tag => "td", class => 'srch_rslt2')->look_down(_tag => "b")->as_text;

			my ($rating, $duration);
			$temp = $result->look_down(_tag => "td", class => 'srch_rslt2')->as_HTML;
			if (defined $temp) {
			    if ($temp =~ /Rating: \((.+)\)\<br\>/) {
				$rating = $1;
			    }
			    if ($temp =~ /Duration: ([0-9:]+)/) {
				$duration = $1;
			    }
			}

			t "$title: $rating: $duration\n";
			
			$temp = $result->look_down(_tag => "td", class => 	'srch_rslt4');
			my $desc = ($temp->content_list())[0];
			$desc =~ s/(^\s+|\s+$)//g;
			t "---\n$desc\n---\n";
			
			my $start = gen_start_time($date, $time, $now);
			
			# Try to get full title from description if title seems cut off
			if ($title =~ /\.\.\.$/ ) {
				   $title =~ s/\.\.\.$//g;
				  # Try get full title from description;
				 if ($desc =~ /^'(${title}[^\.]+[^\'])'?\.\s+(.+)/) {
					   t "REMAPPING TITLE from $title to $1";
					$title = $1;
					$desc = $2;
					  t "New desc = $desc";
				}
			}
			
			my $subtitle = undef;
			my $year = undef;
			my $actors = undef;
			my $director = undef;
			my $writers = undef;	   # Unused right now
			my $commentators = undef;  # Unused right now
			my $category = undef;

				
			if ($desc =~ /^'([^\.]+)'\.\s+(.+)/) {
				$subtitle = $1;
				$desc = $2;
				t "FOUND EPISODE TITLE: $subtitle";
				t "Title: $title";
				t "New desc = $desc";
				$category = "series";
			}
			
			if ($desc =~ /^Aka ([^\.]+)\. (.*)/) {
				$desc = $2;
				my $aka = $1;
				t "Aka found: $aka\n";
				# TODO - do something with the aka
			}
			
			if ($desc =~ /(.*)\. HI Subtitles$/) {
				$desc = $1;
				t "REMOVING Subtitle string";
				# TODO: Encode subtitles in output
			}
				
			if ($desc =~ /(.*) \((\d{4})\)\s*([^\.]+)\.?\s*$/) {
				$year = $2;
				$director = $3;
				$desc = $1;
				t "desc = $desc\n";
				t "Year = $year\n";
				t "Director = $director\n";
			}
			
			if ($desc =~ /(.*) \((\d{4})\)\s*$/) {
				$desc = $1;
				$year = $2;
				t "desc = $desc\n";
				t "Year = $year\n";
			}
			
			if (defined $year && $desc =~ /(.*\.)\s+([^\.]+ [A-Z][^\.]+)\.\s*/) {
				$desc = $1;
				$actors = $2;
				if (defined $actors) {
					$actors =~ s/^\s+//g;
					$actors =~ s/\s+$//g;
					my @a = split(/,\s+/, $actors);
					$actors = [];
					foreach my $a (@a) {
						push @$actors, $a;
					}
				}
				$category = "movie";
			}

			# Trim whitespace from elements
			$title =~ s/(^\s+|\s+$)//g;
			$desc =~ s/(^\s+|\s+$)//g;
			$subtitle =~ s/(^\s+|\s+$)//g if $subtitle;

			# Fix "Press 'i'" entries
            if ($title =~ /^Press .i.$/) {
                $title = $subtitle;
                $subtitle = undef;
            }

			$r = undef;
			$r->{title} = [[$title]];
			$r->{'sub-title'} = [[$subtitle]] if $subtitle;
			$r->{rating} = [[$rating, "DSTV"]];
			$r->{start} = $start;
			$r->{channel} = "$chanid.dstv.com";
			$r->{desc} = [[$desc]];
			$r->{category} = [[ $category, 'en' ]] if $category;
				
			# credits
			my %c;
			$c{director} = [ $director ] if $director;
			$c{actor} = $actors if $actors;
			$c{writer} = $writers if $writers;
			$c{commentator} = $commentators if $commentators;
			$c{director} = [ $director ] if $director;
			$r->{date} = $year if $year;

			$r->{credits} = \%c if %c;
				
			if (defined $prev_r) {
				$prev_r->{stop} = $start;

				my $write = 1;

				my ($hr, $min) = split(/:/, $time);
				my ($prev_hr, $prev_min) = split(/:/, $prev_time);
				if ($name eq 'M-Net' && ($opt_opentime || 
                        $opt_opentime_combined)) {
					if ($hr <= 17) { # $prev ends before 17:00
						$write = 0;
					}
					if ($prev_hr >= 19) { # $prev starts after 19:00
						$write = 0;
					}
				}
				if ($name eq 'M-Net' && $opt_opentime_combined) {
                    $writer->write_programme($prev_r);
                    if ($write == 1) {
                        $prev_r->{channel} = "$chanid-o.dstv.com";
                        push @array_ot, $prev_r;
                    }
				} elsif ($write == 1) {
					$writer->write_programme($prev_r);
				}
			}
			$prev_time = $time;
			$prev_r = $r;

		}
	}
    # Write opentime-combined data
    if (@array_ot) {
        for my $ot_prog ( @array_ot ) {
            $writer->write_programme($ot_prog);
        }
        @array_ot = undef;
        
    }
    $data = "success";
    $tree->delete;
    return $data;

}


sub process_mnet_html {
	my $inhash = shift;
	my $chanid = $inhash->{'id'};
	my $name = $inhash->{'name'};
    my $now = time();
	my $data;
    my $tries = 0;
    if ($opt_cache) {
        my $cachefile = "/tmp/tv_grab_za-cache-$chanid";
    	if (! -f $cachefile) {
    		$data=tidy(get_mnet($name));
    		open CACHE, ">$cachefile";
    		print CACHE $data;
    		close CACHE;
    	} else {
    		open CACHE, $cachefile;
    		my @data = <CACHE>;
    		close CACHE;
    		$data = join("", @data);
    	}
    } else {
        $data = tidy(get_mnet($name));
    }

	if ($data =~ /:error:(.*):/) {
        return $data;
	}

	# parse the page to a document object
	my $tree = HTML::TreeBuilder->new();
	$tree->parse($data);
	my ($prev_r, $r, $prev_time);
	
   	my @array_ot;

	# Find the date headers on the page

    my @tags = $tree->look_down(
      sub {
        # the lcs are to fold case
        lc($_[0]->attr('_tag')) eq 'font' and lc($_[0]->attr('class')) eq 'date' 
        or lc($_[0]->attr('_tag')) eq 'font' and lc($_[0]->attr('class')) eq 'time' 
        or lc($_[0]->attr('_tag')) eq 'font' and lc($_[0]->attr('class')) eq 'title' 
        or lc($_[0]->attr('_tag')) eq 'p'
        or lc($_[0]->attr('_tag')) eq 'a'
      }
    );


    my ($date,$time,$title,$rating);
    foreach my $tag (@tags) {
        my $tag_text = $tag->as_text;
        if ($tag->attr('class') && $tag->attr('class') eq 'date') {
        # Date
            $tag_text =~ s/\240/ /g;
            $tag_text =~ /(\d+) (.*) (\d{4})/;
            $date = "$2 $1";
            next;
        }
        if ($tag->attr('class') && $tag->attr('class') eq 'time') {
        # Time
            $tag_text =~ /^\s?(\d\d:\d\d)$/;
            $time = "$1";
            next;
        }
        if ($tag->attr('class') && $tag->attr('class') eq 'title') {
        # Title
            $tag_text =~ s/[\302\240]//g;
            $title = $tag_text;
            next;
        }
        
        if ($tag->attr('_tag') && $tag->attr('_tag') eq 'a' &&
            $tag->attr('onclick') && $tag->attr('onclick') =~ /OpenAgeRestriction/) {
        # Rating
                $rating = $tag_text;
                next;
        }
        
        if ($tag->attr('_tag') && $tag->attr('_tag') eq 'p' &&
            $date && $time && $title) {
        # Description

    		my $desc = $tag_text;
			$desc =~ s/(^\s+|\s+$)//g;
			t "---\n$desc\n---\n";
			
			my $start = gen_start_time($date, $time, $now);
			
			# Try to get full title from description if title seems cut off
			if ($title =~ /\.\.\.$/ ) {
				   $title =~ s/\.\.\.$//g;
				  # Try get full title from description;
				 if ($desc =~ /^'(${title}[^\.]+[^\'])'?\.\s+(.+)/) {
					   t "REMAPPING TITLE from $title to $1";
					$title = $1;
					$desc = $2;
					  t "New desc = $desc";
				}
			}
			
			my $subtitle = undef;
			my $year = undef;
			my $actors = undef;
			my $director = undef;
			my $writers = undef;	   # Unused right now
			my $commentators = undef;  # Unused right now
			my $category = undef;

				
			if ($desc =~ /^'([^\.]+)'\.\s+(.+)/) {
				$subtitle = $1;
				$desc = $2;
				t "FOUND EPISODE TITLE: $subtitle";
				t "Title: $title";
				t "New desc = $desc";
				$category = "series";
			}
			
			if ($desc =~ /^Aka ([^\.]+)\. (.*)/) {
				$desc = $2;
				my $aka = $1;
				t "Aka found: $aka\n";
				# TODO - do something with the aka
			}
			
			if ($desc =~ /(.*)\. HI Subtitles$/) {
				$desc = $1;
				t "REMOVING Subtitle string";
				# TODO: Encode subtitles in output
			}
				
			if ($desc =~ /(.*) \((\d{4})\)\s*([^\.]+)\.?\s*$/) {
				$year = $2;
				$director = $3;
				$desc = $1;
				t "desc = $desc\n";
				t "Year = $year\n";
				t "Director = $director\n";
			}
			
			if ($desc =~ /(.*) \((\d{4})\)\s*$/) {
				$desc = $1;
				$year = $2;
				t "desc = $desc\n";
				t "Year = $year\n";
			}
			
			if (defined $year && $desc =~ /(.*\.)\s+([^\.]+ [A-Z][^\.]+)\.\s*/) {
				$desc = $1;
				$actors = $2;
				if (defined $actors) {
					$actors =~ s/^\s+//g;
					$actors =~ s/\s+$//g;
					my @a = split(/,\s+/, $actors);
					$actors = [];
					foreach my $a (@a) {
						push @$actors, $a;
					}
				}
				$category = "movie";
			}

			# Trim whitespace from elements
			$title =~ s/(^\s+|\s+$)//g;
			$desc =~ s/(^\s+|\s+$)//g;
			$subtitle =~ s/(^\s+|\s+$)//g if $subtitle;

			# Fix "Press 'i'" entries
            if ($title =~ /^Press .i.$/) {
                $title = $subtitle;
                $subtitle = undef;
            }
            
            if (not $rating) { $rating = "Family"; }

			$r = undef;
			$r->{title} = [[$title]];
			$r->{'sub-title'} = [[$subtitle]] if $subtitle;
			$r->{rating} = [[$rating, "DSTV"]];
			$r->{start} = $start;
			$r->{channel} = "$chanid.dstv.com";
			$r->{desc} = [[$desc]];
			$r->{category} = [[ $category, 'en' ]] if $category;
				
			# credits
			my %c;
			$c{director} = [ $director ] if $director;
			$c{actor} = $actors if $actors;
			$c{writer} = $writers if $writers;
			$c{commentator} = $commentators if $commentators;
			$c{director} = [ $director ] if $director;
			$r->{date} = $year if $year;

			$r->{credits} = \%c if %c;


				
			if (defined $prev_r) {
				$prev_r->{stop} = $start;

				my $write = 1;

				my ($hr, $min) = split(/:/, $time);
				my ($prev_hr, $prev_min) = split(/:/, $prev_time);
				if ($name eq 'M-Net' && ($opt_opentime || 
                        $opt_opentime_combined)) {
					if ($hr <= 17) { # $prev ends before 17:00
						$write = 0;
					}
					if ($prev_hr >= 19) { # $prev starts after 19:00
						$write = 0;
					}
				}
    			if ($name eq 'M-Net' && $opt_opentime_combined) {
                    $writer->write_programme($prev_r);
                    if ($write == 1) {
                        $prev_r->{channel} = "$chanid-o.dstv.com";
                        push @array_ot, $prev_r;
                    }
				} elsif ($write == 1) {
					$writer->write_programme($prev_r);
				}
			}
			$prev_time = $time;
			$prev_r = $r;
            undef $title;
            undef $time;
        }

    }
    
    # Write opentime-combined data
    if (@array_ot) {
        for my $ot_prog ( @array_ot ) {
            $writer->write_programme($ot_prog);
        }
        @array_ot = undef;
        
    }
    $data = "success";
    $tree->delete;
    return $data;

}


# get channel listing
sub get_channels {
	my $bar;


	$bar = new XMLTV::ProgressBar('getting list of channels', 1)
	  if not $opt_quiet;
	my %channels;
	my $url="http://www.dstv.com/main.aspx?ID=136";
	my $local_data=get_nice($url);
	die "could not get channel listing $url, aborting\n"
	  if not defined $local_data;

	# FIXME commonize this
	local $SIG{__WARN__} = sub {
		warn "$url: $_[0]";
	};
	local $SIG{__DIE__} = sub {
		die "$url: $_[0]";
	};
	
	my $tree = HTML::TreeBuilder->new();
	$tree->parse($local_data);

	# all channel elements are options inside the ChannelID select

	my @list = $tree->look_down(
		_tag   => 'img',
		class => 'artcl_img',
		height => '70',
	);
	foreach my $entry (@list) {
		my $table = $entry->parent()->parent()->parent();
		
		my $temp   = $table->look_down(_tag => 'a', class => 'img_btn') or next;
		my $name   = $temp->look_down(_tag => 'b')->as_text();
		my $chanid = $temp->parent->look_down(_tag => 'i')->as_text();
#        next;
		my $tempopt  = $table->look_down(_tag => 'select') or next;
#		$tempopt->attr('onchange') =~ /GoToSchedule\((\d+),this\.value\)/;
#		my $optid = $1;
		
		$channels{$chanid} = {'name' => $name, 'id' => $chanid};
	}
	$tree->delete;
	die "no channels could be found" if not keys %channels;
	update $bar if not $opt_quiet;
	$bar->finish() if not $opt_quiet;
	return %channels;
}

# Bump a YYYYMMDD date by one.
sub nextday {
	my $d = shift;
	my $p = parse_date($d);
	my $n = DateCalc($p, '+ 1 day');
	return UnixDate($n, '%Q');
}

sub mode_configure {

	XMLTV::Config_file::check_no_overwrite($config_file);
	%channels = get_channels();

	open(CONF, ">$config_file") or die "cannot write to $config_file: $!";

	# Ask about each channel.
	my @chs = sort {uc($channels{$a}->{'name'}) cmp uc($channels{$b}->{'name'})} keys %channels;
	my @qs = map { "add channel '$channels{$_}->{name}'?" } @chs;
	my @want = ask_many_boolean(1, @qs);
    my $handle_mnet;
	foreach (@chs) {
		my $w = shift @want;
			warn("cannot read input, stopping channel questions"), last
			  if not defined $w;

			# Print a config line, but comment it out if channel not wanted.
			print CONF '#' if not $w;
			my $name = $channels{$_}->{'name'};
			print CONF "channel $_ $name\n";
            if ($name eq 'M-Net' && $w) {
                $handle_mnet = 1
            }
	}

    if ($handle_mnet) {
        if (ask_boolean( "Retrieve Opentime and full M-Net schedule?")) {
        	print CONF "option opentime-combined 1\n";
        } 
        elsif (ask_boolean( "Retrieve only Opentime?")) {
        	print CONF "option opentime 1\n";
        }
    }
    my @choices = (1,7,14,30);
    my $days = ask_choice("Number of days to retrieve",$choices[2], @choices);
    print CONF "option days $days\n";
    
    my $retries;
    $retries = ask("Number of retries for failed downloads? ",$retries);
    print CONF "option retries $retries\n";

    say ("Some channels currently have no data on the dstv.com site");
    say ("Until this has been fixed, you can retrieve missing channels from mnet.co.za");
    if (ask_boolean( "Would you like to enable fallback support?")) {
        @choices = ('dstv','mnet');
        my $fallback_option = ask_choice("Primary data source?",$choices[0], @choices);
        if ($fallback_option eq 'dstv') {
            print CONF "option mnet-fallback 1\n";
        } else {
            print CONF "option dstv-fallback 1\n";
        }
    }
	close CONF or warn "cannot close $config_file: $!";
	say("Finished configuration.");

	exit();
}

# Initialize cookies and retrieve current channel ID's
sub get_dstv_channel_mappings {

    t "refreshing dstv channel mappings";
    my $req = GET 'http://www.dstv.com/DStv_Guide/default.aspx';
#    my $req = GET 'http://cptdc1/ddefault.htm';
    $req->header('Accept-Encoding','gzip');

    # Make the request
    my $res = $ua->request($req);

    # Unpack
    if (($res->headers()->header('Content-Encoding')) && 
        ($res->headers()->header('Content-Encoding') eq 'gzip')) {
            $res->content(Compress::Zlib::memGunzip($res->content));
    }

    # Check the response
    if ($res->is_success) {
    	my $chantree = HTML::TreeBuilder->new();
    	$chantree->parse($res->content);

    	my $chanselect = $chantree->look_down(_tag => 'select', id => 'Channel');
      	my @chan_list = $chanselect->look_down(_tag => "option");
    	foreach my $chanentry (@chan_list) {
            $dstvchannelmap{$chanentry->as_text} = $chanentry->attr('value') if ($chanentry->as_text =~ /^[^-]/);
        }
        $chantree->delete;
    }
}

# Initialize cookies and retrieve current channel ID's
sub get_mnet_channel_mappings {

    t "refreshing mnet channel mappings";
    my $req = GET 'http://www.mnet.co.za/schedules/default.asp';
    $req->header('Accept-Encoding','gzip');

    # Make the request
    my $res = $ua->request($req);

    # Unpack
    if (($res->headers()->header('Content-Encoding')) && 
        ($res->headers()->header('Content-Encoding') eq 'gzip')) {
            $res->content(Compress::Zlib::memGunzip($res->content));
    }

    # Check the response
    if ($res->is_success) {
    	my $chantree = HTML::TreeBuilder->new();
    	$chantree->parse($res->content);

    	my $chanselect = $chantree->look_down(_tag => 'select', name => 'channelid');
      	my @chan_list = $chanselect->look_down(_tag => "option");
    	foreach my $chanentry (@chan_list) {
            my $chantemp = $chanentry->as_text;
			$chantemp =~ s/(^\s+|\s+$)//g;
            if ($chanentry->attr('value') =~ /^\d+$/) {        
                foreach my $fixup (keys %mnetchannelfixups) {
                    if ($fixup eq $chantemp) {
                        $mnetchannelmap{$mnetchannelfixups{$fixup}} = $chanentry->attr('value');
                    } else {
                        $mnetchannelmap{$chantemp} = $chanentry->attr('value');
                    }
                }
            }
        }
        $chantree->delete;
    }
}

sub get_dstv_time_mappings() {
	my $data = shift;
    my ($res,$req);

	my $tree = HTML::TreeBuilder->new();
	$tree->parse($data);

    my @tags = $tree->look_down(
      sub {
        # the lcs are to fold case
        lc($_[0]->attr('_tag')) eq 'img' and lc($_[0]->attr('src')) =~ /^get\.aspx\?guid/
      }
    );

    our %dstvtimehashes = ();
    foreach my $tag (@tags) {
        my $temptag = $tag->attr('src');
        $tag->attr('src') =~ /^get\.aspx\?GUID=(.*)$/;
        my $guid = $1;
        if (not defined $dstvtimehashes{$guid}) {
            # unique guid - get data
            my $url = "http://www.dstv.com/DStv_Guide/get.aspx?GUID=$1";
        	t "getting time mapping for GUID: $1";
            $req = GET $url;
            $req->header('Accept-Encoding','gzip');
            $req->header('Referer','http://www.dstv.com/DStv_Guide/default.aspx');
            $res = $ua->request($req);
            if ($res->is_success) {
                if (($res->headers()->header('Content-Encoding')) && 
                    ($res->headers()->header('Content-Encoding') eq 'gzip')) {
                        $res->content(Compress::Zlib::memGunzip($res->content));
                }
                # hash
                my $imagehash = md5_hex($res->content);
                # compare
                if (defined $dstvfilehashes{$imagehash}) {
                    $dstvtimehashes{$guid} = $dstvfilehashes{$imagehash};
                } else {
                   if (! -f "$guid.gif") {
                       print STDERR "Undefined image mapping for GUID=$guid\n";
                       print STDERR "MD5 = $imagehash\n";
                       print STDERR "Saving to file $guid.gif\n";
                       if (!open GIF, ">$guid.gif") {
                           print STDERR "Cannot write file: $!\n";
                           next;
                       }
                       print GIF $res->content;
                       close GIF;
                    }
                }
              
            }
    	}
    }

    $tree->delete;

}

# Download listings for a channel name - refresh mappings if necessary
sub get_dstv() {
    my $channame = shift;
    my $url = channel_uri $channame;
    my $data;
    my $tries = 0;
    my $req;
    my $res;
    while ($tries < $opt_retries && not defined $data) {
        $tries++;
    	t "getting URL: $url";
        $req = GET $url;
        $req->header('Accept-Encoding','gzip');
        $req->header('Referer','http://www.dstv.com/DStv_Guide/default.aspx');
        $res = $ua->request($req);
        if ($res->status_line =~ /302/) {
            # Invalid channel code - refresh mappings
            t "302 error - refreshing Data";
            get_dstv_channel_mappings();
        }
            
        if ($res->is_success) {
            if (($res->headers()->header('Content-Encoding')) && 
                ($res->headers()->header('Content-Encoding') eq 'gzip')) {
                    $res->content(Compress::Zlib::memGunzip($res->content));
            }
            if ($res->content =~ /No Results Found/) {
                if ($tries == 0) {
                    # Cookie may have expired - refresh mappings
                    t "No results found - refreshing mappings";
                    get_dstv_channel_mappings();
                } else {
                    # Second failure - assume no data
                    t "No results found - skipping";
                    $data = ":error:no data:";   
                }
            } else {
                $data = $res->content;
            }
    	}
    }
    if (not $data) {$data = ":error:maximum retries:"};   
    return $data;
}



sub get_mnet() {
	my $channame = shift;
    my $data;
    my $tries = 0;
    my $req;
    my $res;
 
    while ($tries < $opt_retries && not defined $data) {
        $tries++;

        my $url = "http://www.mnet.co.za/schedules/default.asp";
        t "getting channel: $channame (ID = ".$mnetchannelmap{$channame}.")";

	my $start_date = POSIX::strftime("%Y/%m/%d", localtime(time()));
        my $end_date = POSIX::strftime("%Y/%m/%d", localtime(time()+(($use_days-1)*86400)));

        $res = $ua->post( $url,
            [  'startDate' => $start_date,
               'EndDate' => $end_date, 
               'sType' => '5', 
               'channelid' => $mnetchannelmap{$channame}, 
               'searchstring' => '', 
               'channel' => '$mnetchannelmap{$channame}', 
               'theType' => 'today', 
               'firstRun' => 'false', 
            ],
            'Accept-Encoding' => 'gzip',
            'Referer' => 'http://www.mnet.co.za/schedules/default.asp',
            );

        if ($res->is_success) {
            if (($res->headers()->header('Content-Encoding')) && 
                ($res->headers()->header('Content-Encoding') eq 'gzip')) {
                    $res->content(Compress::Zlib::memGunzip($res->content));
            }
            if ($res->content =~ /did not return any results/) {
                t "No results found - skipping";
                $data = ":error:no data:";   
            } else {
                $data = $res->content;
            }
    	}
    }
    if (not $data) {$data = ":error:maximum retries:"};   
    return $data;
}


sub init_cookies {
	get_nice('http://www.dstv.com');
	my $bar = new XMLTV::ProgressBar('Initialising cookies', 1)
	  if not $opt_quiet;
    update $bar if not $opt_quiet;
	$bar->finish() if not $opt_quiet;
}

sub gen_start_time {
	my ($date, $time, $now) = @_;
	
	# Date = 'Friday 23 May'
	# Time = '14:00';
	# str2time sometimes gets the wrong year
	# Append the current year to the date
	# If we are in Nov or Dec, reading for Jan or Feb, year++
	my $year = (localtime($now))[5] + 1900;
	my $mon = (localtime($now))[4] + 1;
	if (($mon == 11 || $mon == 12) && ($date =~ /(January|February)/)) {
		$year++;
	}
	my $timestamp = UnixDate("$date $year $time", "%s");
#	my $timestamp = str2time("$date $year $time");
	return POSIX::strftime("%Y%m%d%H%M", localtime($timestamp));
}

