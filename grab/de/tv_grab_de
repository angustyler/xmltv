#!/usr/bin/perl -w
# $Id: tv_grab_de,v 1.21 2003/04/06 14:55:35 epaepa Exp $

=head1 NAME

tv_grab_de - Grab TV listings for Germany and Austria.

=head1 SYNOPSIS

tv_grab_de [--help] [--output FILE] [--days N] [--offset N] [--quiet]

=head1 DESCRIPTION

Output TV listings for several channels available in German-speaking
countries.  The data comes from Gottfried SzingE<39>s database which
is exported to XMLTV format.  The default is to grab as many days as
possible from the current day onwards.

B<--output FILE> write to FILE rather than standard output.

B<--days N> grab N days starting from today, rather than as many as
possible.

B<--offset N> start grabbing N days from today, rather than starting
today.  N may be negative.

B<--quiet> suppress the progress messages normally written to standard
error.

=head1 SEE ALSO

L<xmltv(5)>, L<http://www.szing.at/>, L<http://www.szing.at/xmltv/>

=head1 AUTHOR

Ed Avis, ed@membled.com

=head1 BUGS

The data produced has the same timezones as the upstream source.  At
present, that source is not handling daylight saving time correctly,
so the timezones in XML output are wrong.  (However, the times
themselves are correct, once you allow for the different timezone.)

The data source does not include full channels information and the
channels are identified by short names rather than the RFC2838 form
recommended by the XMLTV DTD.

During summer time, for a period of one hour either side of midnight
the calculation of 'today' may be wrong (could grab one hour too
little or 23 hours too much).  Should check whether this does in fact
happen.

=cut

use strict;

# We work by inheriting from XMLTV::Grab_XML and overriding certain
# methods.
#
use XMLTV::Grab_XML;
package Grab_XML_de;
use base 'XMLTV::Grab_XML';

use Date::Manip;
use LWP::Simple;

# Todo: perhaps we should internationalize messages and docs?
sub country( $ ) {
    my $pkg = shift;
    return 'Germany/Austria';
}

# Use Compress::Zlib if installed, else spawn external gzip.
use File::Temp;
sub my_gunzip {
    my ($fh, $fname) = File::Temp::tempfile();
    print $fh $_[0] or die "cannot write to $fname: $!";
    close $fh or die "cannot close $fname: $!";
    open(GZIP, "gzip -d <$fname |") or die "cannot run gzip: $!";
    local $/ = undef;
    my $r = <GZIP>;
    close GZIP or die "cannot close pipe from gzip: $!";
    unlink $fname or die "cannot unlink $fname: $!";
    return $r;
}
BEGIN {
    eval { require Compress::Zlib };
    if ($@) { *gunzip = \&my_gunzip }
    else {
	# eval()ed to quieten 'used only once' warning if the module
	# was not loaded.
	#
	eval '*gunzip = \*Compress::Zlib::memGunzip';
    }
}

# Assume the listings source uses CET (see BUGS above).
sub date_init( $ ) {
    my $pkg = shift;
    Date_Init('TZ=CET');
}

my $URL_BASE = 'http://www.szing.at/xmltv/';
# http://yasd.cc/xmltv/index.lst is a backup server, but we don't use
# that at present.

# Returns a hash mapping YYYMMDD to URL.
sub urls_by_date( $ ) {
    my $pkg = shift;
    my $url = "${URL_BASE}index.lst";
    my $index = get($url);
    die "could not get index page $url, aborting\n"
      if not defined $index;
    my %urls;
    foreach (split /\n/, $index) {
	if (not /^(tv_(\d{8})\.xml\.gz);(\d+)$/) {
	    warn "unexpected entry in index: $_, skipping\n";
	    next;
	}
	my ($filename, $date, $size) = ($1, $2, $3);
	if (defined $urls{$date}) {
	    warn "file for $date seen twice in index\n";
	}
	$urls{$date} = "$URL_BASE$filename";
    }
    return %urls;
}

# Given some data downloaded for a particular day, turn it into XML.
sub xml_from_data( $$ ) {
    my $pkg = shift;
    local $_ = gunzip(shift);
    if (not defined) {
	warn 'could not gunzip';
	return undef;
    }

    # Fix empty 'length' elements that wrongly appear in the XML.
    s!<length[^>]*></length>!!g;

    return $_;
}

Grab_XML_de->go();
